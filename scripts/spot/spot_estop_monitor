#!/usr/bin/env python

# Copyright (c) 2019-2022, NVIDIA CORPORATION. All rights reserved.
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import RPi.GPIO as GPIO
import time


import rospy
import math
import time
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist, TwistStamped
from std_msgs.msg import Bool
from std_srvs.srv import SetBool, SetBoolResponse

# Pin Definitions


class estop_monitor(object):
        
    def __init__(self):
        self.estop_pub = rospy.Publisher("executive/command/estop", Bool, queue_size=1)
        
        self.prev_value = None
        self.input_pin = 22  # BCM pin 18, BOARD pin 12
        # Pin Setup:
        GPIO.setmode(GPIO.BOARD)  # BCM pin-numbering scheme from Raspberry Pi
        GPIO.setup(self.input_pin, GPIO.IN)  # set pin as an input pin



    def run(self):
        r = rospy.Rate(10)

        while not rospy.is_shutdown():
         # print("Starting demo now! Press CTRL+C to exit")
            try:
                value = GPIO.input( self.input_pin )
                if value != self.prev_value:
                    self.prev_value = value
                
                estop_msg = Bool()
                estop_msg.data = value
                self.estop_pub.publish(estop_msg)
            except:
                continue
            r.sleep()
        GPIO.cleanup()

if __name__ == "__main__":
    rospy.init_node('spot_estop_monitor_node')
    node = estop_monitor()
    node.run()

